"""personal project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_q_UN98tu7qv6EVZB8uNVWBooY4AhMn5
"""

# WARNIMG : DO NOT CHANGE unless you need to add another function


def col1_to_col0(df): #remove col0 and make col1 as col0
    column_name = df.iloc[0]
    df = df.iloc[1:]
    df.columns = column_name
    return df

def tostring(string): #make sheet datas to str(object)
  if type(string) == int:
    return str(string)
  else:
    return string

def toint(string): #make sheet datas to floating number
  if type(string) == float:
    return int(string)
  else:
    return int(string)

def tofloat(string): #make sheet datas to floating number
  if type(string) == str:
    return float(string)
  else:
    return string

def yearchange(i): #change type of year to int
  i = int(i)
  i = str(i)
  if len(i) == 2 and i.find('1') == 0:
    return int('20' + i)
  elif len(i) == 2 and i.find('2') == 0:
    return int('20' + i)
  elif len(i) == 2 and i.find('1') != 0:
    return int('19' + i)
  elif len(i) == 2 and i.find('2') != 0:
    return int('19' + 1)
  elif len(i) == 1:
    return int('200' + i) 
  else:
    return int(i)

def sheettonum(string): #make sheet strings into floting number. unit: million 
  if type(string) == float:
    return string
  elif string.find('K') > -1:
    string = string.replace('K', '')
    string = int(string)
    return string/1000
  elif string.find('M') > 0:
    string = string.replace('M', '')
    return float(string)
  else:
    return float(string)

"""
the following functions will make your python coding easier than ever before.
please use these functions when you do coding in python3

::: DICTIONARY :::



"""

def sheettofloat(df, exception, exception2, exception3, exception4, exception5):
  for i in df:
    if i == exception :
      continue
    elif i == exception2:
      continue
    elif i == exception3:
      continue
    elif i == exception4:
      continue
    elif i == exception5:
      continue
    elif df[i].dtype == object:
      df[i] = df[i].apply(sheettonum)
    else:
      continue
  return df

def yearchangesheet(df):
  return df.apply(yearchange)

"""
tablecutting.py
"""

def col1_to_col0(df):
    column_name = df.iloc[0]
    df = df.iloc[1:]
    df.columns = column_name
    return df

def mymean(v):
  v = np.array(v)
  return sum(v)/len(v)

def myvar(v):
  return sum(((v - mymean(v))**2)/len(v))

def mystd(v):
  return (myvar(v)) ** 0.5


def cov(x, y, parentness): #calculate covariance 
  numerator = sum((np.array(x) - mymean(x)) * (np.array(y) - mymean(y)))
  N = len(x)
  if parentness == 'parent':
    return numerator / N
  elif parentness == 'child':
    return numerator / (N - 1)


def corr(x, y): #calculate correlationship
  numerator = sum((np.array(x) - mymean(x)) * (np.array(y) - mymean(y)))
  denominator = ((sum((np.array(x) - mymean(x))**2)) * (sum((np.array(y) - mymean(y))**2))) ** 0.5
  return numerator / denominator

def caltrend(df):
  action_df = np.sum(df[df['Genre'] == 'Action'])[2:]
  adv_df = np.sum(df[df['Genre'] == 'Adventure'])[2:]
  misc_df = np.sum(df[df['Genre'] == 'Misc'])[2:]
  plat_df = np.sum(df[df['Genre'] == 'Platform'])[2:]
  sport_df = np.sum(fd[df['Genre'] == 'Sports'])[2:]
  sim_df = np.sum(df[df['Genre'] == 'Simulation'])[2:]
  racing_df = np.sum(df[df['Genre'] == 'Racing'])[2:]
  rp_df = np.sum(df[df['Genre'] == 'Role-Playing'])[2:]
  puzzle_df = np.sum(df[df['Genre'] == 'Puzzle'])[2:]
  rts_df = np.sum(df[df['Genre'] == 'Strategy'])[2:]
  fight_df = np.sum(df[df['Genre'] == 'Fighting'])[2:]
  shooter_df = np.sum(df[df['Genre'] == 'Shooter'])[2:]
  return pd.DataFrame([action_df, adv_df, misc_df, plat_df, sport_df, sim_df, racing_df, rp_df, puzzle_df, rts_df, fight_df, shooter_df], index=df_genre)